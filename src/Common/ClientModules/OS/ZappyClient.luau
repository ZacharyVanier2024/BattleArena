--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Client generated by Zap v0.6.17 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		Input = table.freeze({
			Fire = noop
		}),
		WeaponChange = table.freeze({
			Fire = noop
		}),
		CombatSwing = table.freeze({
			On = noop
		}),
		CombatImpact = table.freeze({
			On = noop
		}),
		ApplyKnockback = table.freeze({
			On = noop
		}),
		SpaceBarHeld = table.freeze({
			Fire = noop
		}),
		Air3Knockback = table.freeze({
			On = noop
		}),
		ResetNetworkOwnership = table.freeze({
			Fire = noop
		}),
	}) :: Events
end
if RunService:IsServer() then
	error("Cannot use the client module on the server!")
end
local remotes = ReplicatedStorage:WaitForChild("ZAP")

local reliable = remotes:WaitForChild("ZAP_RELIABLE")
assert(reliable:IsA("RemoteEvent"), "Expected ZAP_RELIABLE to be a RemoteEvent")

local unreliable = { remotes:WaitForChild("ZAP_UNRELIABLE_0"), remotes:WaitForChild("ZAP_UNRELIABLE_1"), remotes:WaitForChild("ZAP_UNRELIABLE_2"), remotes:WaitForChild("ZAP_UNRELIABLE_3") }
assert(unreliable[1]:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE_0 to be an UnreliableRemoteEvent")
assert(unreliable[2]:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE_1 to be an UnreliableRemoteEvent")
assert(unreliable[3]:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE_2 to be an UnreliableRemoteEvent")
assert(unreliable[4]:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE_3 to be an UnreliableRemoteEvent")

local function SendEvents()
	if outgoing_used ~= 0 then
		local buff = buffer.create(outgoing_used)
		buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)

		reliable:FireServer(buff, outgoing_inst)

		outgoing_buff = buffer.create(64)
		outgoing_used = 0
		outgoing_size = 64
		table.clear(outgoing_inst)
	end
end

RunService.Heartbeat:Connect(SendEvents)

local unreliable_events = table.create(4)
local unreliable_event_queue: { [number]: { any } } = table.create(4)
unreliable_events[0] = {}
unreliable_event_queue[0] = {}
unreliable_events[1] = {}
unreliable_event_queue[1] = {}
unreliable_events[2] = {}
unreliable_event_queue[2] = {}
unreliable_events[3] = {}
unreliable_event_queue[3] = {}
unreliable[1].OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local value
	value = {}
	value.playerId = buffer.readi32(incoming_buff, read(4))
	local len_1 = buffer.readu16(incoming_buff, read(2))
	value.attackName = buffer.readstring(incoming_buff, read(len_1), len_1)
	local len_2 = buffer.readu16(incoming_buff, read(2))
	value.weaponName = buffer.readstring(incoming_buff, read(len_2), len_2)
	local len_3 = buffer.readu16(incoming_buff, read(2))
	value.side = buffer.readstring(incoming_buff, read(len_3), len_3)
	if unreliable_events[0][1] then
		for _, cb in unreliable_events[0] do
			task.spawn(cb, value)
		end
	else
		table.insert(unreliable_event_queue[0], value)
		if #unreliable_event_queue[0] > 64 then
			warn(`[ZAP] {#unreliable_event_queue[0]} events in queue for CombatSwing. Did you forget to attach a listener?`)
		end
	end
end)
unreliable[2].OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local value
	value = {}
	value.attackerId = buffer.readi32(incoming_buff, read(4))
	value.victimId = buffer.readi32(incoming_buff, read(4))
	local len_4 = buffer.readu16(incoming_buff, read(2))
	value.victimModel = buffer.readstring(incoming_buff, read(len_4), len_4)
	local len_5 = buffer.readu16(incoming_buff, read(2))
	value.attackName = buffer.readstring(incoming_buff, read(len_5), len_5)
	local len_6 = buffer.readu16(incoming_buff, read(2))
	value.weaponName = buffer.readstring(incoming_buff, read(len_6), len_6)
	local len_7 = buffer.readu16(incoming_buff, read(2))
	value.hitPartName = buffer.readstring(incoming_buff, read(len_7), len_7)
	value.hitX = buffer.readi32(incoming_buff, read(4))
	value.hitY = buffer.readi32(incoming_buff, read(4))
	value.hitZ = buffer.readi32(incoming_buff, read(4))
	if unreliable_events[1][1] then
		for _, cb in unreliable_events[1] do
			task.spawn(cb, value)
		end
	else
		table.insert(unreliable_event_queue[1], value)
		if #unreliable_event_queue[1] > 64 then
			warn(`[ZAP] {#unreliable_event_queue[1]} events in queue for CombatImpact. Did you forget to attach a listener?`)
		end
	end
end)
unreliable[3].OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local value
	value = {}
	value.targetId = buffer.readi32(incoming_buff, read(4))
	local len_8 = buffer.readu16(incoming_buff, read(2))
	value.targetModel = buffer.readstring(incoming_buff, read(len_8), len_8)
	value.directionX = buffer.readi32(incoming_buff, read(4))
	value.directionY = buffer.readi32(incoming_buff, read(4))
	value.directionZ = buffer.readi32(incoming_buff, read(4))
	value.force = buffer.readi32(incoming_buff, read(4))
	value.duration = buffer.readi32(incoming_buff, read(4))
	value.verticalForce = buffer.readi32(incoming_buff, read(4))
	value.isCasterAdvance = buffer.readu8(incoming_buff, read(1)) == 1
	local len_9 = buffer.readu16(incoming_buff, read(2))
	value.attackName = buffer.readstring(incoming_buff, read(len_9), len_9)
	if unreliable_events[2][1] then
		for _, cb in unreliable_events[2] do
			task.spawn(cb, value)
		end
	else
		table.insert(unreliable_event_queue[2], value)
		if #unreliable_event_queue[2] > 64 then
			warn(`[ZAP] {#unreliable_event_queue[2]} events in queue for ApplyKnockback. Did you forget to attach a listener?`)
		end
	end
end)
unreliable[4].OnClientEvent:Connect(function(buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local value
	value = {}
	value.attackerId = buffer.readi32(incoming_buff, read(4))
	value.targetId = buffer.readi32(incoming_buff, read(4))
	local len_10 = buffer.readu16(incoming_buff, read(2))
	value.targetModel = buffer.readstring(incoming_buff, read(len_10), len_10)
	value.attackerX = buffer.readi32(incoming_buff, read(4))
	value.attackerY = buffer.readi32(incoming_buff, read(4))
	value.attackerZ = buffer.readi32(incoming_buff, read(4))
	if unreliable_events[3][1] then
		for _, cb in unreliable_events[3] do
			task.spawn(cb, value)
		end
	else
		table.insert(unreliable_event_queue[3], value)
		if #unreliable_event_queue[3] > 64 then
			warn(`[ZAP] {#unreliable_event_queue[3]} events in queue for Air3Knockback. Did you forget to attach a listener?`)
		end
	end
end)
local returns = {
	SendEvents = SendEvents,
	Input = {
		Fire = function(Value: ({
			foo: (string),
			bar: (number),
		}))
			local saved = save()
			load_empty()
			local len_11 = #Value.foo
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_11)
			alloc(len_11)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.foo, len_11)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.bar)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[1]:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	},
	WeaponChange = {
		Fire = function(Value: ({
			toolName: (string),
			Equipped: (boolean),
		}))
			local saved = save()
			load_empty()
			local len_12 = #Value.toolName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_12)
			alloc(len_12)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.toolName, len_12)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.Equipped and 1 or 0)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[2]:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	},
	SpaceBarHeld = {
		Fire = function(Value: ({
			held: (boolean),
		}))
			local saved = save()
			load_empty()
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.held and 1 or 0)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[3]:FireServer(buff, outgoing_inst)
			load(saved)
		end,
	},
	ResetNetworkOwnership = {
		Fire = function(Value: ({
			targetId: (number),
			targetModel: (string),
		}))
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, 0)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.targetId)
			local len_13 = #Value.targetModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_13)
			alloc(len_13)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.targetModel, len_13)
		end,
	},
	CombatSwing = {
		On = function(Callback: (Value: ({
			playerId: (number),
			attackName: (string),
			weaponName: (string),
			side: (string),
		})) -> ())
			table.insert(unreliable_events[0], Callback)
			for _, value in unreliable_event_queue[0] do
				task.spawn(Callback, value)
			end
			unreliable_event_queue[0] = {}
			return function()
				table.remove(unreliable_events[0], table.find(unreliable_events[0], Callback))
			end
		end,
	},
	CombatImpact = {
		On = function(Callback: (Value: ({
			attackerId: (number),
			victimId: (number),
			victimModel: (string),
			attackName: (string),
			weaponName: (string),
			hitPartName: (string),
			hitX: (number),
			hitY: (number),
			hitZ: (number),
		})) -> ())
			table.insert(unreliable_events[1], Callback)
			for _, value in unreliable_event_queue[1] do
				task.spawn(Callback, value)
			end
			unreliable_event_queue[1] = {}
			return function()
				table.remove(unreliable_events[1], table.find(unreliable_events[1], Callback))
			end
		end,
	},
	ApplyKnockback = {
		On = function(Callback: (Value: ({
			targetId: (number),
			targetModel: (string),
			directionX: (number),
			directionY: (number),
			directionZ: (number),
			force: (number),
			duration: (number),
			verticalForce: (number),
			isCasterAdvance: (boolean),
			attackName: (string),
		})) -> ())
			table.insert(unreliable_events[2], Callback)
			for _, value in unreliable_event_queue[2] do
				task.spawn(Callback, value)
			end
			unreliable_event_queue[2] = {}
			return function()
				table.remove(unreliable_events[2], table.find(unreliable_events[2], Callback))
			end
		end,
	},
	Air3Knockback = {
		On = function(Callback: (Value: ({
			attackerId: (number),
			targetId: (number),
			targetModel: (string),
			attackerX: (number),
			attackerY: (number),
			attackerZ: (number),
		})) -> ())
			table.insert(unreliable_events[3], Callback)
			for _, value in unreliable_event_queue[3] do
				task.spawn(Callback, value)
			end
			unreliable_event_queue[3] = {}
			return function()
				table.remove(unreliable_events[3], table.find(unreliable_events[3], Callback))
			end
		end,
	},
}
type Events = typeof(returns)
return returns
