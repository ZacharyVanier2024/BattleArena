--!native
--!optimize 2
--!nocheck
--!nolint
--#selene: allow(unused_variable, global_usage)
-- Server generated by Zap v0.6.17 (https://github.com/red-blox/zap)
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local outgoing_buff: buffer
local outgoing_used: number
local outgoing_size: number
local outgoing_inst: { Instance }
local outgoing_apos: number

local incoming_buff: buffer
local incoming_read: number
local incoming_inst: { Instance }
local incoming_ipos: number

-- thanks to https://dom.rojo.space/binary.html#cframe
local CFrameSpecialCases = {
	CFrame.Angles(0, 0, 0),
	CFrame.Angles(math.rad(90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(180)),
	CFrame.Angles(math.rad(-90), 0, 0),
	CFrame.Angles(0, math.rad(180), math.rad(90)),
	CFrame.Angles(0, math.rad(90), math.rad(90)),
	CFrame.Angles(0, 0, math.rad(90)),
	CFrame.Angles(0, math.rad(-90), math.rad(90)),
	CFrame.Angles(math.rad(-90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(-90), 0),
	CFrame.Angles(math.rad(90), math.rad(-90), 0),
	CFrame.Angles(0, math.rad(90), math.rad(180)),
	CFrame.Angles(0, math.rad(-90), math.rad(180)),
	CFrame.Angles(0, math.rad(180), math.rad(0)),
	CFrame.Angles(math.rad(-90), math.rad(-180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(180)),
	CFrame.Angles(math.rad(90), math.rad(180), math.rad(0)),
	CFrame.Angles(0, math.rad(0), math.rad(-90)),
	CFrame.Angles(0, math.rad(-90), math.rad(-90)),
	CFrame.Angles(0, math.rad(-180), math.rad(-90)),
	CFrame.Angles(0, math.rad(90), math.rad(-90)),
	CFrame.Angles(math.rad(90), math.rad(90), 0),
	CFrame.Angles(0, math.rad(90), 0),
	CFrame.Angles(math.rad(-90), math.rad(90), 0),
}

local function alloc(len: number)
	if outgoing_used + len > outgoing_size then
		while outgoing_used + len > outgoing_size do
			outgoing_size = outgoing_size * 2
		end

		local new_buff = buffer.create(outgoing_size)
		buffer.copy(new_buff, 0, outgoing_buff, 0, outgoing_used)

		outgoing_buff = new_buff
	end

	outgoing_apos = outgoing_used
	outgoing_used = outgoing_used + len

	return outgoing_apos
end

local function read(len: number)
	local pos = incoming_read
	incoming_read = incoming_read + len

	return pos
end

local function save()
	return {
		buff = outgoing_buff,
		used = outgoing_used,
		size = outgoing_size,
		inst = outgoing_inst,
	}
end

local function load(data: {
	buff: buffer,
	used: number,
	size: number,
	inst: { Instance },
})
	outgoing_buff = data.buff
	outgoing_used = data.used
	outgoing_size = data.size
	outgoing_inst = data.inst
end

local function load_empty()
	outgoing_buff = buffer.create(64)
	outgoing_used = 0
	outgoing_size = 64
	outgoing_inst = {}
end

load_empty()

local types = {}
if not RunService:IsRunning() then
	local noop = function() end
	return table.freeze({
		SendEvents = noop,
		Input = table.freeze({
			On = noop
		}),
		WeaponChange = table.freeze({
			On = noop
		}),
		CombatSwing = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		CombatImpact = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		ApplyKnockback = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		SpaceBarHeld = table.freeze({
			On = noop
		}),
		Air3Knockback = table.freeze({
			Fire = noop,
			FireAll = noop,
			FireExcept = noop,
			FireList = noop,
			FireSet = noop
		}),
		ResetNetworkOwnership = table.freeze({
			SetCallback = noop
		}),
	}) :: Events
end
local Players = game:GetService("Players")

if RunService:IsClient() then
	error("Cannot use the server module on the client!")
end

local remotes = ReplicatedStorage:FindFirstChild("ZAP")
if remotes == nil then
	remotes = Instance.new("Folder")
	remotes.Name = "ZAP"
	remotes.Parent = ReplicatedStorage
end

local reliable = remotes:FindFirstChild("ZAP_RELIABLE")
if reliable == nil then
	reliable = Instance.new("RemoteEvent")
	reliable.Name = "ZAP_RELIABLE"
	reliable.Parent = remotes
end

local function getOrCreateUnreliableRemote(name: string): UnreliableRemoteEvent
	local remote = remotes:FindFirstChild(name)

	if remote == nil then
		remote = Instance.new("UnreliableRemoteEvent")
		remote.Name = name
		remote.Parent = remotes
	end

	return remote
end

local unreliable = { getOrCreateUnreliableRemote("ZAP_UNRELIABLE_0"), getOrCreateUnreliableRemote("ZAP_UNRELIABLE_1"), getOrCreateUnreliableRemote("ZAP_UNRELIABLE_2"), getOrCreateUnreliableRemote("ZAP_UNRELIABLE_3") }
assert(unreliable[1]:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE_0 to be an UnreliableRemoteEvent")
assert(unreliable[2]:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE_1 to be an UnreliableRemoteEvent")
assert(unreliable[3]:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE_2 to be an UnreliableRemoteEvent")
assert(unreliable[4]:IsA("UnreliableRemoteEvent"), "Expected ZAP_UNRELIABLE_3 to be an UnreliableRemoteEvent")
local player_map = {}

local function load_player(player: Player)
	if player_map[player] then
		load(player_map[player])
	else
		load_empty()
	end
end

Players.PlayerRemoving:Connect(function(player)
	player_map[player] = nil
end)

local function SendEvents()
	for player, outgoing in player_map do
		if outgoing.used > 0 then
			local buff = buffer.create(outgoing.used)
			buffer.copy(buff, 0, outgoing.buff, 0, outgoing.used)

			reliable:FireClient(player, buff, outgoing.inst)

			outgoing.buff = buffer.create(64)
			outgoing.used = 0
			outgoing.size = 64
			table.clear(outgoing.inst)
		end
	end
end

RunService.Heartbeat:Connect(SendEvents)

local reliable_events = table.create(1)
local unreliable_events = table.create(3)
unreliable_events[0] = {}
unreliable_events[1] = {}
unreliable_events[2] = {}
reliable.OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local len = buffer.len(buff)
	while incoming_read < len do
		local id = buffer.readu8(buff, read(1))
		if id == 0 then
			local value
			value = {}
			value.targetId = buffer.readi32(incoming_buff, read(4))
			local len_1 = buffer.readu16(incoming_buff, read(2))
			value.targetModel = buffer.readstring(incoming_buff, read(len_1), len_1)
			if reliable_events[0] then
				task.spawn(reliable_events[0], player, value)
			end
		else
			error("Unknown event id")
		end
	end
end)
unreliable[1].OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local value
	value = {}
	local len_2 = buffer.readu16(incoming_buff, read(2))
	value.foo = buffer.readstring(incoming_buff, read(len_2), len_2)
	value.bar = buffer.readu8(incoming_buff, read(1))
	for _, cb in unreliable_events[0] do
		task.spawn(cb, player, value)
	end
end)
unreliable[2].OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local value
	value = {}
	local len_3 = buffer.readu16(incoming_buff, read(2))
	value.toolName = buffer.readstring(incoming_buff, read(len_3), len_3)
	value.Equipped = buffer.readu8(incoming_buff, read(1)) == 1
	for _, cb in unreliable_events[1] do
		task.spawn(cb, player, value)
	end
end)
unreliable[3].OnServerEvent:Connect(function(player, buff, inst)
	incoming_buff = buff
	incoming_inst = inst
	incoming_read = 0
	incoming_ipos = 0
	local value
	value = {}
	value.held = buffer.readu8(incoming_buff, read(1)) == 1
	for _, cb in unreliable_events[2] do
		task.spawn(cb, player, value)
	end
end)
local returns = {
	SendEvents = SendEvents,
	CombatSwing = {
		Fire = function(Player: Player, Value: ({
			playerId: (number),
			attackName: (string),
			weaponName: (string),
			side: (string),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.playerId)
			local len_4 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_4)
			alloc(len_4)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_4)
			local len_5 = #Value.weaponName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_5)
			alloc(len_5)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len_5)
			local len_6 = #Value.side
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_6)
			alloc(len_6)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.side, len_6)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[1]:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: ({
			playerId: (number),
			attackName: (string),
			weaponName: (string),
			side: (string),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.playerId)
			local len_7 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_7)
			alloc(len_7)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_7)
			local len_8 = #Value.weaponName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_8)
			alloc(len_8)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len_8)
			local len_9 = #Value.side
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_9)
			alloc(len_9)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.side, len_9)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[1]:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: ({
			playerId: (number),
			attackName: (string),
			weaponName: (string),
			side: (string),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.playerId)
			local len_10 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_10)
			alloc(len_10)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_10)
			local len_11 = #Value.weaponName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_11)
			alloc(len_11)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len_11)
			local len_12 = #Value.side
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_12)
			alloc(len_12)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.side, len_12)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable[1]:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			playerId: (number),
			attackName: (string),
			weaponName: (string),
			side: (string),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.playerId)
			local len_13 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_13)
			alloc(len_13)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_13)
			local len_14 = #Value.weaponName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_14)
			alloc(len_14)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len_14)
			local len_15 = #Value.side
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_15)
			alloc(len_15)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.side, len_15)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable[1]:FireClient(player, buff, outgoing_inst)
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			playerId: (number),
			attackName: (string),
			weaponName: (string),
			side: (string),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.playerId)
			local len_16 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_16)
			alloc(len_16)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_16)
			local len_17 = #Value.weaponName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_17)
			alloc(len_17)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len_17)
			local len_18 = #Value.side
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_18)
			alloc(len_18)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.side, len_18)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in Set do
				unreliable[1]:FireClient(player, buff, outgoing_inst)
			end
		end,
	},
	CombatImpact = {
		Fire = function(Player: Player, Value: ({
			attackerId: (number),
			victimId: (number),
			victimModel: (string),
			attackName: (string),
			weaponName: (string),
			hitPartName: (string),
			hitX: (number),
			hitY: (number),
			hitZ: (number),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerId)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.victimId)
			local len_19 = #Value.victimModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_19)
			alloc(len_19)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.victimModel, len_19)
			local len_20 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_20)
			alloc(len_20)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_20)
			local len_21 = #Value.weaponName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_21)
			alloc(len_21)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len_21)
			local len_22 = #Value.hitPartName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_22)
			alloc(len_22)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.hitPartName, len_22)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitZ)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[2]:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: ({
			attackerId: (number),
			victimId: (number),
			victimModel: (string),
			attackName: (string),
			weaponName: (string),
			hitPartName: (string),
			hitX: (number),
			hitY: (number),
			hitZ: (number),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerId)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.victimId)
			local len_23 = #Value.victimModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_23)
			alloc(len_23)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.victimModel, len_23)
			local len_24 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_24)
			alloc(len_24)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_24)
			local len_25 = #Value.weaponName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_25)
			alloc(len_25)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len_25)
			local len_26 = #Value.hitPartName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_26)
			alloc(len_26)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.hitPartName, len_26)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitZ)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[2]:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: ({
			attackerId: (number),
			victimId: (number),
			victimModel: (string),
			attackName: (string),
			weaponName: (string),
			hitPartName: (string),
			hitX: (number),
			hitY: (number),
			hitZ: (number),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerId)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.victimId)
			local len_27 = #Value.victimModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_27)
			alloc(len_27)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.victimModel, len_27)
			local len_28 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_28)
			alloc(len_28)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_28)
			local len_29 = #Value.weaponName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_29)
			alloc(len_29)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len_29)
			local len_30 = #Value.hitPartName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_30)
			alloc(len_30)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.hitPartName, len_30)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitZ)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable[2]:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			attackerId: (number),
			victimId: (number),
			victimModel: (string),
			attackName: (string),
			weaponName: (string),
			hitPartName: (string),
			hitX: (number),
			hitY: (number),
			hitZ: (number),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerId)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.victimId)
			local len_31 = #Value.victimModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_31)
			alloc(len_31)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.victimModel, len_31)
			local len_32 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_32)
			alloc(len_32)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_32)
			local len_33 = #Value.weaponName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_33)
			alloc(len_33)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len_33)
			local len_34 = #Value.hitPartName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_34)
			alloc(len_34)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.hitPartName, len_34)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitZ)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable[2]:FireClient(player, buff, outgoing_inst)
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			attackerId: (number),
			victimId: (number),
			victimModel: (string),
			attackName: (string),
			weaponName: (string),
			hitPartName: (string),
			hitX: (number),
			hitY: (number),
			hitZ: (number),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerId)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.victimId)
			local len_35 = #Value.victimModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_35)
			alloc(len_35)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.victimModel, len_35)
			local len_36 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_36)
			alloc(len_36)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_36)
			local len_37 = #Value.weaponName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_37)
			alloc(len_37)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.weaponName, len_37)
			local len_38 = #Value.hitPartName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_38)
			alloc(len_38)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.hitPartName, len_38)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.hitZ)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in Set do
				unreliable[2]:FireClient(player, buff, outgoing_inst)
			end
		end,
	},
	ApplyKnockback = {
		Fire = function(Player: Player, Value: ({
			targetId: (number),
			targetModel: (string),
			directionX: (number),
			directionY: (number),
			directionZ: (number),
			force: (number),
			duration: (number),
			verticalForce: (number),
			isCasterAdvance: (boolean),
			attackName: (string),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.targetId)
			local len_39 = #Value.targetModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_39)
			alloc(len_39)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.targetModel, len_39)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionZ)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.force)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.duration)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.verticalForce)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.isCasterAdvance and 1 or 0)
			local len_40 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_40)
			alloc(len_40)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_40)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[3]:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: ({
			targetId: (number),
			targetModel: (string),
			directionX: (number),
			directionY: (number),
			directionZ: (number),
			force: (number),
			duration: (number),
			verticalForce: (number),
			isCasterAdvance: (boolean),
			attackName: (string),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.targetId)
			local len_41 = #Value.targetModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_41)
			alloc(len_41)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.targetModel, len_41)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionZ)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.force)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.duration)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.verticalForce)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.isCasterAdvance and 1 or 0)
			local len_42 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_42)
			alloc(len_42)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_42)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[3]:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: ({
			targetId: (number),
			targetModel: (string),
			directionX: (number),
			directionY: (number),
			directionZ: (number),
			force: (number),
			duration: (number),
			verticalForce: (number),
			isCasterAdvance: (boolean),
			attackName: (string),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.targetId)
			local len_43 = #Value.targetModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_43)
			alloc(len_43)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.targetModel, len_43)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionZ)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.force)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.duration)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.verticalForce)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.isCasterAdvance and 1 or 0)
			local len_44 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_44)
			alloc(len_44)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_44)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable[3]:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			targetId: (number),
			targetModel: (string),
			directionX: (number),
			directionY: (number),
			directionZ: (number),
			force: (number),
			duration: (number),
			verticalForce: (number),
			isCasterAdvance: (boolean),
			attackName: (string),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.targetId)
			local len_45 = #Value.targetModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_45)
			alloc(len_45)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.targetModel, len_45)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionZ)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.force)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.duration)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.verticalForce)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.isCasterAdvance and 1 or 0)
			local len_46 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_46)
			alloc(len_46)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_46)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable[3]:FireClient(player, buff, outgoing_inst)
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			targetId: (number),
			targetModel: (string),
			directionX: (number),
			directionY: (number),
			directionZ: (number),
			force: (number),
			duration: (number),
			verticalForce: (number),
			isCasterAdvance: (boolean),
			attackName: (string),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.targetId)
			local len_47 = #Value.targetModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_47)
			alloc(len_47)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.targetModel, len_47)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.directionZ)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.force)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.duration)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.verticalForce)
			alloc(1)
			buffer.writeu8(outgoing_buff, outgoing_apos, Value.isCasterAdvance and 1 or 0)
			local len_48 = #Value.attackName
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_48)
			alloc(len_48)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.attackName, len_48)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in Set do
				unreliable[3]:FireClient(player, buff, outgoing_inst)
			end
		end,
	},
	Air3Knockback = {
		Fire = function(Player: Player, Value: ({
			attackerId: (number),
			targetId: (number),
			targetModel: (string),
			attackerX: (number),
			attackerY: (number),
			attackerZ: (number),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerId)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.targetId)
			local len_49 = #Value.targetModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_49)
			alloc(len_49)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.targetModel, len_49)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerZ)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[4]:FireClient(Player, buff, outgoing_inst)
		end,
		FireAll = function(Value: ({
			attackerId: (number),
			targetId: (number),
			targetModel: (string),
			attackerX: (number),
			attackerY: (number),
			attackerZ: (number),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerId)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.targetId)
			local len_50 = #Value.targetModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_50)
			alloc(len_50)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.targetModel, len_50)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerZ)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			unreliable[4]:FireAllClients(buff, outgoing_inst)
		end,
		FireExcept = function(Except: Player, Value: ({
			attackerId: (number),
			targetId: (number),
			targetModel: (string),
			attackerX: (number),
			attackerY: (number),
			attackerZ: (number),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerId)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.targetId)
			local len_51 = #Value.targetModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_51)
			alloc(len_51)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.targetModel, len_51)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerZ)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in Players:GetPlayers() do
				if player ~= Except then
					unreliable[4]:FireClient(player, buff, outgoing_inst)
				end
			end
		end,
		FireList = function(List: { Player }, Value: ({
			attackerId: (number),
			targetId: (number),
			targetModel: (string),
			attackerX: (number),
			attackerY: (number),
			attackerZ: (number),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerId)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.targetId)
			local len_52 = #Value.targetModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_52)
			alloc(len_52)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.targetModel, len_52)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerZ)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for _, player in List do
				unreliable[4]:FireClient(player, buff, outgoing_inst)
			end
		end,
		FireSet = function(Set: { [Player]: true }, Value: ({
			attackerId: (number),
			targetId: (number),
			targetModel: (string),
			attackerX: (number),
			attackerY: (number),
			attackerZ: (number),
		}))
			load_empty()
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerId)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.targetId)
			local len_53 = #Value.targetModel
			alloc(2)
			buffer.writeu16(outgoing_buff, outgoing_apos, len_53)
			alloc(len_53)
			buffer.writestring(outgoing_buff, outgoing_apos, Value.targetModel, len_53)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerX)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerY)
			alloc(4)
			buffer.writei32(outgoing_buff, outgoing_apos, Value.attackerZ)
			local buff = buffer.create(outgoing_used)
			buffer.copy(buff, 0, outgoing_buff, 0, outgoing_used)
			for player in Set do
				unreliable[4]:FireClient(player, buff, outgoing_inst)
			end
		end,
	},
	Input = {
		On = function(Callback: (Player: Player, Value: ({
			foo: (string),
			bar: (number),
		})) -> ()): () -> ()
			table.insert(unreliable_events[0], Callback)
			return function()
				table.remove(unreliable_events[0], table.find(unreliable_events[0], Callback))
			end
		end,
	},
	WeaponChange = {
		On = function(Callback: (Player: Player, Value: ({
			toolName: (string),
			Equipped: (boolean),
		})) -> ()): () -> ()
			table.insert(unreliable_events[1], Callback)
			return function()
				table.remove(unreliable_events[1], table.find(unreliable_events[1], Callback))
			end
		end,
	},
	SpaceBarHeld = {
		On = function(Callback: (Player: Player, Value: ({
			held: (boolean),
		})) -> ()): () -> ()
			table.insert(unreliable_events[2], Callback)
			return function()
				table.remove(unreliable_events[2], table.find(unreliable_events[2], Callback))
			end
		end,
	},
	ResetNetworkOwnership = {
		SetCallback = function(Callback: (Player: Player, Value: ({
			targetId: (number),
			targetModel: (string),
		})) -> ()): () -> ()
			reliable_events[0] = Callback
			return function()
				reliable_events[0] = nil
			end
		end,
	},
}
type Events = typeof(returns)
return returns
